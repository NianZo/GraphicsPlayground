name: Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
    
    - name: Docker build and test
      id: Build
      uses: actions/Docker-CI-Action@v1
      with: 
        action-to-perform: 'build&test'
      #runs:
        #id: 'docker'
        #image: 'Dockerfile'
        #args:
          #- ${{ build }}
    #- name: Setup
      #run: |
      #  sudo apt-get update
      #  sudo apt-get install qt6-base_6.3.1 libgtest-dev mesa-common-dev vulkan-tools libvulkan-dev

    #- name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      #run: docker build -t ci/ci_build:0.1 -f Dockerfile .

    #- name: Build
      # Build your program with the given configuration
      #run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      #run: | 
      #  docker run --rm --name=build --mount type=bind,source=${PWD},target=/src ci/ci_build:0.1 bash
      #  cd src
      #  cmake -B build -S .
      #  make -C build

    #- name: Test
      #working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # run: ctest -C ${{env.BUILD_TYPE}}
      
